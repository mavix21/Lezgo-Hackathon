"use client";

import { useAccount, useApi, useAlert } from "@gear-js/react-hooks";
import { web3FromSource } from "@polkadot/extension-dapp";
import { ProgramMetadata } from "@gear-js/api";
import { Button } from "@gear-js/ui";

function CreateEvent() {
  const alert = useAlert();
  const { accounts, account } = useAccount();
  const { api, isApiReady } = useApi();

  const programID =
    "0x9d9cfee654487f0b35a464990ceec861c809c2cc5f2e562a6b6ec4664f7ee8bc";
  const meta =
    "0002000100000000000107000000010e0000000000000001110000000112000000ad1b68000808696f44496e6974436f6e666967466163746f727900000c011c636f64655f6964040118436f64654964000154666163746f72795f61646d696e5f6163636f756e741001305665633c4163746f7249643e00013c6761735f666f725f70726f6772616d18010c75363400000410106773746418636f6d6d6f6e287072696d69746976657318436f64654964000004000801205b75383b2033325d000008000003200000000c000c00000503001000000214001410106773746418636f6d6d6f6e287072696d6974697665731c4163746f724964000004000801205b75383b2033325d00001800000506001c0808696f34466163746f7279416374696f6e0001143443726561746550726f6772616d04012c696e69745f636f6e666967200128496e6974436f6e66696700000030436f6465496455706461746504012c6e65775f636f64655f6964040118436f646549640001004055706461746547617350726f6772616d040018010c7536340002002041646441646d696e04013861646d696e5f6163746f725f696414011c4163746f7249640003003852656d6f766552656769737472790401086964180108496400040000200808696f28496e6974436f6e6669670000080128636f6c6c656374696f6e240128436f6c6c656374696f6e000118636f6e6669672c0118436f6e6669670000240808696f28436f6c6c656374696f6e00000801106e616d65280118537472696e6700012c6465736372697074696f6e280118537472696e6700002800000502002c0808696f18436f6e66696700000401386d61785f6d696e745f636f756e743001304f7074696f6e3c753132383e00003004184f7074696f6e04045401340108104e6f6e6500000010536f6d650400340000010000340000050700380418526573756c74080454013c044501400108084f6b04003c000000000c45727204004000000100003c0808696f30466163746f72794576656e740001143850726f6772616d437265617465640c01086964180108496400011c6164647265737314011c4163746f72496400012c696e69745f636f6e666967200128496e6974436f6e66696700000058476173557064617465645375636365737366756c6c79080128757064617465645f627914011c4163746f7249640001386e65775f6761735f616d6f756e7418010c75363400010064436f64654964557064617465645375636365737366756c6c79080128757064617465645f627914011c4163746f72496400012c6e65775f636f64655f6964040118436f646549640002002841646d696e4164646564080128757064617465645f627914011c4163746f72496400013861646d696e5f6163746f725f696414011c4163746f7249640003003c526567697374727952656d6f76656408012872656d6f7665645f627914011c4163746f72496400013870726f6772616d5f666f725f6964180108496400040000400808696f30466163746f72794572726f720001286c50726f6772616d496e697469616c697a6174696f6e4661696c65640000009850726f6772616d496e697469616c697a6174696f6e4661696c656457697468436f6e746578740400280118537472696e670001008450726f6772616d496e697469616c697a6174696f6e437573746f6d4572726f72310400280118537472696e670002008450726f6772616d496e697469616c697a6174696f6e437573746f6d4572726f72320400280118537472696e6700030030556e617574686f72697a656400040044556e657870656374656446544576656e74000500404d65737361676553656e644572726f72000600204e6f74466f756e640007004c49644e6f74466f756e64496e416464726573730008002849644e6f74466f756e6400090000440808696f145175657279000118184e756d62657200000018436f646549640001004c466163746f727941646d696e4163636f756e7400020034476173466f7250726f6772616d0003002c4964546f4164647265737300040020526567697374727900050000480808696f2851756572795265706c79000118184e756d6265720400180108496400000018436f646549640400040118436f646549640001004c466163746f727941646d696e4163636f756e7404001001305665633c4163746f7249643e00020034476173466f7250726f6772616d040018010c7536340003002c4964546f4164647265737304004c01485665633c2849642c204163746f724964293e00040020526567697374727904005401845665633c284163746f7249642c205665633c2849642c205265636f7264293e293e000500004c000002500050000004081814005400000258005800000408145c005c00000260006000000408186400640808696f185265636f7264000004011c6164647265737314011c4163746f7249640000";
  const metadata = ProgramMetadata.from(meta);

  const message = {
    destination: programID,
    payload: {
      createprogram: {
        init_config: {
          collection: {
            name: "prueba",
            description: "Str",
          },
          config: {
            max_mint_count: 500,
          },
        },
      },
    },
    gasLimit: 9899819245,
    value: 0,
  };

  const signer = async () => {
    if (!account?.address) {
      alert.error("No account found");
      return;
    }

    const isVisibleAccount = accounts.some(
      (visibleAccount) => visibleAccount.address === account.address
    );
    if (!isVisibleAccount) {
      alert.error("Account not available to sign");
      return;
    }

    if (!isApiReady) {
      alert.error("API not ready");
      return;
    }

    try {
      const extrinsic = await api.message.send(message, metadata);
      const injector = await web3FromSource(account.meta.source);
      await extrinsic.signAndSend(
        account.address,
        { signer: injector.signer },
        ({ status }) => {
          if (status.isInBlock) {
            alert.success("Transaction included in block");
          } else if (status.isFinalized) {
            alert.success("Transaction finalized");
          }
        }
      );
    } catch (error) {
      console.error("Transaction failed", error);
      alert.error("Transaction failed");
    }
  };

  return <Button text="Crear" onClick={signer} />;
}

export { CreateEvent };
